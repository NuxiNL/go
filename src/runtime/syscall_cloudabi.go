// Copyright (c) 2016-2017 Nuxi (https://nuxi.nl/) and contributors.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions
// are met:
// 1. Redistributions of source code must retain the above copyright
//    notice, this list of conditions and the following disclaimer.
// 2. Redistributions in binary form must reproduce the above copyright
//    notice, this list of conditions and the following disclaimer in the
//    documentation and/or other materials provided with the distribution.
//
// THIS SOFTWARE IS PROVIDED BY THE AUTHOR AND CONTRIBUTORS ``AS IS'' AND
// ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
// IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
// ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE
// FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
// DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
// OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
// HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
// LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
// OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
// SUCH DAMAGE.
//
// This file is automatically generated. Do not edit.
//
// Source: https://github.com/NuxiNL/cloudabi

package runtime

import (
	"internal/syscall/cloudabi"
	"unsafe"
)

func cloudabi_sys_clock_res_get(
	i0 cloudabi.Clockid,
) (
	o0 cloudabi.Timestamp,
	r cloudabi.Errno,
) {
	args := struct {
		i0 cloudabi.Clockid
		o0 *cloudabi.Timestamp
	}{
		i0: i0,
		o0: &o0,
	}
	r = cloudabi.Errno(asmcgocall(nil, unsafe.Pointer(&args)))
	return
}

func cloudabi_sys_clock_time_get(
	i0 cloudabi.Clockid,
	i1 cloudabi.Timestamp,
) (
	o0 cloudabi.Timestamp,
	r cloudabi.Errno,
) {
	args := struct {
		i0 cloudabi.Clockid
		i1 cloudabi.Timestamp
		o0 *cloudabi.Timestamp
	}{
		i0: i0,
		i1: i1,
		o0: &o0,
	}
	r = cloudabi.Errno(asmcgocall(nil, unsafe.Pointer(&args)))
	return
}

func cloudabi_sys_condvar_signal(
	i0 *cloudabi.Condvar,
	i1 cloudabi.Scope,
	i2 cloudabi.Nthreads,
) (
	r cloudabi.Errno,
) {
	args := struct {
		i0 *cloudabi.Condvar
		i1 cloudabi.Scope
		i2 cloudabi.Nthreads
	}{
		i0: i0,
		i1: i1,
		i2: i2,
	}
	r = cloudabi.Errno(asmcgocall(nil, unsafe.Pointer(&args)))
	return
}

func cloudabi_sys_fd_close(
	i0 cloudabi.Fd,
) (
	r cloudabi.Errno,
) {
	args := struct {
		i0 cloudabi.Fd
	}{
		i0: i0,
	}
	r = cloudabi.Errno(asmcgocall(nil, unsafe.Pointer(&args)))
	return
}

func cloudabi_sys_fd_create1(
	i0 cloudabi.Filetype,
) (
	o0 cloudabi.Fd,
	r cloudabi.Errno,
) {
	args := struct {
		i0 cloudabi.Filetype
		o0 *cloudabi.Fd
	}{
		i0: i0,
		o0: &o0,
	}
	r = cloudabi.Errno(asmcgocall(nil, unsafe.Pointer(&args)))
	return
}

func cloudabi_sys_fd_create2(
	i0 cloudabi.Filetype,
) (
	o0 cloudabi.Fd,
	o1 cloudabi.Fd,
	r cloudabi.Errno,
) {
	args := struct {
		i0 cloudabi.Filetype
		o0 *cloudabi.Fd
		o1 *cloudabi.Fd
	}{
		i0: i0,
		o0: &o0,
		o1: &o1,
	}
	r = cloudabi.Errno(asmcgocall(nil, unsafe.Pointer(&args)))
	return
}

func cloudabi_sys_fd_datasync(
	i0 cloudabi.Fd,
) (
	r cloudabi.Errno,
) {
	args := struct {
		i0 cloudabi.Fd
	}{
		i0: i0,
	}
	r = cloudabi.Errno(asmcgocall(nil, unsafe.Pointer(&args)))
	return
}

func cloudabi_sys_fd_dup(
	i0 cloudabi.Fd,
) (
	o0 cloudabi.Fd,
	r cloudabi.Errno,
) {
	args := struct {
		i0 cloudabi.Fd
		o0 *cloudabi.Fd
	}{
		i0: i0,
		o0: &o0,
	}
	r = cloudabi.Errno(asmcgocall(nil, unsafe.Pointer(&args)))
	return
}

func cloudabi_sys_fd_pread(
	i0 cloudabi.Fd,
	i1 *cloudabi.Iovec,
	i2 uint,
	i3 cloudabi.Filesize,
) (
	o0 uint,
	r cloudabi.Errno,
) {
	args := struct {
		i0 cloudabi.Fd
		i1 *cloudabi.Iovec
		i2 uint
		i3 cloudabi.Filesize
		o0 *uint
	}{
		i0: i0,
		i1: i1,
		i2: i2,
		i3: i3,
		o0: &o0,
	}
	r = cloudabi.Errno(asmcgocall(nil, unsafe.Pointer(&args)))
	return
}

func cloudabi_sys_fd_pwrite(
	i0 cloudabi.Fd,
	i1 *cloudabi.Ciovec,
	i2 uint,
	i3 cloudabi.Filesize,
) (
	o0 uint,
	r cloudabi.Errno,
) {
	args := struct {
		i0 cloudabi.Fd
		i1 *cloudabi.Ciovec
		i2 uint
		i3 cloudabi.Filesize
		o0 *uint
	}{
		i0: i0,
		i1: i1,
		i2: i2,
		i3: i3,
		o0: &o0,
	}
	r = cloudabi.Errno(asmcgocall(nil, unsafe.Pointer(&args)))
	return
}

func cloudabi_sys_fd_read(
	i0 cloudabi.Fd,
	i1 *cloudabi.Iovec,
	i2 uint,
) (
	o0 uint,
	r cloudabi.Errno,
) {
	args := struct {
		i0 cloudabi.Fd
		i1 *cloudabi.Iovec
		i2 uint
		o0 *uint
	}{
		i0: i0,
		i1: i1,
		i2: i2,
		o0: &o0,
	}
	r = cloudabi.Errno(asmcgocall(nil, unsafe.Pointer(&args)))
	return
}

func cloudabi_sys_fd_replace(
	i0 cloudabi.Fd,
	i1 cloudabi.Fd,
) (
	r cloudabi.Errno,
) {
	args := struct {
		i0 cloudabi.Fd
		i1 cloudabi.Fd
	}{
		i0: i0,
		i1: i1,
	}
	r = cloudabi.Errno(asmcgocall(nil, unsafe.Pointer(&args)))
	return
}

func cloudabi_sys_fd_seek(
	i0 cloudabi.Fd,
	i1 cloudabi.Filedelta,
	i2 cloudabi.Whence,
) (
	o0 cloudabi.Filesize,
	r cloudabi.Errno,
) {
	args := struct {
		i0 cloudabi.Fd
		i1 cloudabi.Filedelta
		i2 cloudabi.Whence
		o0 *cloudabi.Filesize
	}{
		i0: i0,
		i1: i1,
		i2: i2,
		o0: &o0,
	}
	r = cloudabi.Errno(asmcgocall(nil, unsafe.Pointer(&args)))
	return
}

func cloudabi_sys_fd_stat_get(
	i0 cloudabi.Fd,
	i1 *cloudabi.Fdstat,
) (
	r cloudabi.Errno,
) {
	args := struct {
		i0 cloudabi.Fd
		i1 *cloudabi.Fdstat
	}{
		i0: i0,
		i1: i1,
	}
	r = cloudabi.Errno(asmcgocall(nil, unsafe.Pointer(&args)))
	return
}

func cloudabi_sys_fd_stat_put(
	i0 cloudabi.Fd,
	i1 *cloudabi.Fdstat,
	i2 cloudabi.Fdsflags,
) (
	r cloudabi.Errno,
) {
	args := struct {
		i0 cloudabi.Fd
		i1 *cloudabi.Fdstat
		i2 cloudabi.Fdsflags
	}{
		i0: i0,
		i1: i1,
		i2: i2,
	}
	r = cloudabi.Errno(asmcgocall(nil, unsafe.Pointer(&args)))
	return
}

func cloudabi_sys_fd_sync(
	i0 cloudabi.Fd,
) (
	r cloudabi.Errno,
) {
	args := struct {
		i0 cloudabi.Fd
	}{
		i0: i0,
	}
	r = cloudabi.Errno(asmcgocall(nil, unsafe.Pointer(&args)))
	return
}

func cloudabi_sys_fd_write(
	i0 cloudabi.Fd,
	i1 *cloudabi.Ciovec,
	i2 uint,
) (
	o0 uint,
	r cloudabi.Errno,
) {
	args := struct {
		i0 cloudabi.Fd
		i1 *cloudabi.Ciovec
		i2 uint
		o0 *uint
	}{
		i0: i0,
		i1: i1,
		i2: i2,
		o0: &o0,
	}
	r = cloudabi.Errno(asmcgocall(nil, unsafe.Pointer(&args)))
	return
}

func cloudabi_sys_file_advise(
	i0 cloudabi.Fd,
	i1 cloudabi.Filesize,
	i2 cloudabi.Filesize,
	i3 cloudabi.Advice,
) (
	r cloudabi.Errno,
) {
	args := struct {
		i0 cloudabi.Fd
		i1 cloudabi.Filesize
		i2 cloudabi.Filesize
		i3 cloudabi.Advice
	}{
		i0: i0,
		i1: i1,
		i2: i2,
		i3: i3,
	}
	r = cloudabi.Errno(asmcgocall(nil, unsafe.Pointer(&args)))
	return
}

func cloudabi_sys_file_allocate(
	i0 cloudabi.Fd,
	i1 cloudabi.Filesize,
	i2 cloudabi.Filesize,
) (
	r cloudabi.Errno,
) {
	args := struct {
		i0 cloudabi.Fd
		i1 cloudabi.Filesize
		i2 cloudabi.Filesize
	}{
		i0: i0,
		i1: i1,
		i2: i2,
	}
	r = cloudabi.Errno(asmcgocall(nil, unsafe.Pointer(&args)))
	return
}

func cloudabi_sys_file_create(
	i0 cloudabi.Fd,
	i1 *byte,
	i2 uint,
	i3 cloudabi.Filetype,
) (
	r cloudabi.Errno,
) {
	args := struct {
		i0 cloudabi.Fd
		i1 *byte
		i2 uint
		i3 cloudabi.Filetype
	}{
		i0: i0,
		i1: i1,
		i2: i2,
		i3: i3,
	}
	r = cloudabi.Errno(asmcgocall(nil, unsafe.Pointer(&args)))
	return
}

func cloudabi_sys_file_link(
	i0 cloudabi.Lookup,
	i1 *byte,
	i2 uint,
	i3 cloudabi.Fd,
	i4 *byte,
	i5 uint,
) (
	r cloudabi.Errno,
) {
	args := struct {
		i0 cloudabi.Lookup
		i1 *byte
		i2 uint
		i3 cloudabi.Fd
		i4 *byte
		i5 uint
	}{
		i0: i0,
		i1: i1,
		i2: i2,
		i3: i3,
		i4: i4,
		i5: i5,
	}
	r = cloudabi.Errno(asmcgocall(nil, unsafe.Pointer(&args)))
	return
}

func cloudabi_sys_file_open(
	i0 cloudabi.Lookup,
	i1 *byte,
	i2 uint,
	i3 cloudabi.Oflags,
	i4 *cloudabi.Fdstat,
) (
	o0 cloudabi.Fd,
	r cloudabi.Errno,
) {
	args := struct {
		i0 cloudabi.Lookup
		i1 *byte
		i2 uint
		i3 cloudabi.Oflags
		i4 *cloudabi.Fdstat
		o0 *cloudabi.Fd
	}{
		i0: i0,
		i1: i1,
		i2: i2,
		i3: i3,
		i4: i4,
		o0: &o0,
	}
	r = cloudabi.Errno(asmcgocall(nil, unsafe.Pointer(&args)))
	return
}

func cloudabi_sys_file_readdir(
	i0 cloudabi.Fd,
	i1 unsafe.Pointer,
	i2 uint,
	i3 cloudabi.Dircookie,
) (
	o0 uint,
	r cloudabi.Errno,
) {
	args := struct {
		i0 cloudabi.Fd
		i1 unsafe.Pointer
		i2 uint
		i3 cloudabi.Dircookie
		o0 *uint
	}{
		i0: i0,
		i1: i1,
		i2: i2,
		i3: i3,
		o0: &o0,
	}
	r = cloudabi.Errno(asmcgocall(nil, unsafe.Pointer(&args)))
	return
}

func cloudabi_sys_file_readlink(
	i0 cloudabi.Fd,
	i1 *byte,
	i2 uint,
	i3 *byte,
	i4 uint,
) (
	o0 uint,
	r cloudabi.Errno,
) {
	args := struct {
		i0 cloudabi.Fd
		i1 *byte
		i2 uint
		i3 *byte
		i4 uint
		o0 *uint
	}{
		i0: i0,
		i1: i1,
		i2: i2,
		i3: i3,
		i4: i4,
		o0: &o0,
	}
	r = cloudabi.Errno(asmcgocall(nil, unsafe.Pointer(&args)))
	return
}

func cloudabi_sys_file_rename(
	i0 cloudabi.Fd,
	i1 *byte,
	i2 uint,
	i3 cloudabi.Fd,
	i4 *byte,
	i5 uint,
) (
	r cloudabi.Errno,
) {
	args := struct {
		i0 cloudabi.Fd
		i1 *byte
		i2 uint
		i3 cloudabi.Fd
		i4 *byte
		i5 uint
	}{
		i0: i0,
		i1: i1,
		i2: i2,
		i3: i3,
		i4: i4,
		i5: i5,
	}
	r = cloudabi.Errno(asmcgocall(nil, unsafe.Pointer(&args)))
	return
}

func cloudabi_sys_file_stat_fget(
	i0 cloudabi.Fd,
	i1 *cloudabi.Filestat,
) (
	r cloudabi.Errno,
) {
	args := struct {
		i0 cloudabi.Fd
		i1 *cloudabi.Filestat
	}{
		i0: i0,
		i1: i1,
	}
	r = cloudabi.Errno(asmcgocall(nil, unsafe.Pointer(&args)))
	return
}

func cloudabi_sys_file_stat_fput(
	i0 cloudabi.Fd,
	i1 *cloudabi.Filestat,
	i2 cloudabi.Fsflags,
) (
	r cloudabi.Errno,
) {
	args := struct {
		i0 cloudabi.Fd
		i1 *cloudabi.Filestat
		i2 cloudabi.Fsflags
	}{
		i0: i0,
		i1: i1,
		i2: i2,
	}
	r = cloudabi.Errno(asmcgocall(nil, unsafe.Pointer(&args)))
	return
}

func cloudabi_sys_file_stat_get(
	i0 cloudabi.Lookup,
	i1 *byte,
	i2 uint,
	i3 *cloudabi.Filestat,
) (
	r cloudabi.Errno,
) {
	args := struct {
		i0 cloudabi.Lookup
		i1 *byte
		i2 uint
		i3 *cloudabi.Filestat
	}{
		i0: i0,
		i1: i1,
		i2: i2,
		i3: i3,
	}
	r = cloudabi.Errno(asmcgocall(nil, unsafe.Pointer(&args)))
	return
}

func cloudabi_sys_file_stat_put(
	i0 cloudabi.Lookup,
	i1 *byte,
	i2 uint,
	i3 *cloudabi.Filestat,
	i4 cloudabi.Fsflags,
) (
	r cloudabi.Errno,
) {
	args := struct {
		i0 cloudabi.Lookup
		i1 *byte
		i2 uint
		i3 *cloudabi.Filestat
		i4 cloudabi.Fsflags
	}{
		i0: i0,
		i1: i1,
		i2: i2,
		i3: i3,
		i4: i4,
	}
	r = cloudabi.Errno(asmcgocall(nil, unsafe.Pointer(&args)))
	return
}

func cloudabi_sys_file_symlink(
	i0 *byte,
	i1 uint,
	i2 cloudabi.Fd,
	i3 *byte,
	i4 uint,
) (
	r cloudabi.Errno,
) {
	args := struct {
		i0 *byte
		i1 uint
		i2 cloudabi.Fd
		i3 *byte
		i4 uint
	}{
		i0: i0,
		i1: i1,
		i2: i2,
		i3: i3,
		i4: i4,
	}
	r = cloudabi.Errno(asmcgocall(nil, unsafe.Pointer(&args)))
	return
}

func cloudabi_sys_file_unlink(
	i0 cloudabi.Fd,
	i1 *byte,
	i2 uint,
	i3 cloudabi.Ulflags,
) (
	r cloudabi.Errno,
) {
	args := struct {
		i0 cloudabi.Fd
		i1 *byte
		i2 uint
		i3 cloudabi.Ulflags
	}{
		i0: i0,
		i1: i1,
		i2: i2,
		i3: i3,
	}
	r = cloudabi.Errno(asmcgocall(nil, unsafe.Pointer(&args)))
	return
}

func cloudabi_sys_lock_unlock(
	i0 *cloudabi.Lock,
	i1 cloudabi.Scope,
) (
	r cloudabi.Errno,
) {
	args := struct {
		i0 *cloudabi.Lock
		i1 cloudabi.Scope
	}{
		i0: i0,
		i1: i1,
	}
	r = cloudabi.Errno(asmcgocall(nil, unsafe.Pointer(&args)))
	return
}

func cloudabi_sys_mem_advise(
	i0 unsafe.Pointer,
	i1 uint,
	i2 cloudabi.Advice,
) (
	r cloudabi.Errno,
) {
	args := struct {
		i0 unsafe.Pointer
		i1 uint
		i2 cloudabi.Advice
	}{
		i0: i0,
		i1: i1,
		i2: i2,
	}
	r = cloudabi.Errno(asmcgocall(nil, unsafe.Pointer(&args)))
	return
}

func cloudabi_sys_mem_map(
	i0 unsafe.Pointer,
	i1 uint,
	i2 cloudabi.Mprot,
	i3 cloudabi.Mflags,
	i4 cloudabi.Fd,
	i5 cloudabi.Filesize,
) (
	o0 unsafe.Pointer,
	r cloudabi.Errno,
) {
	args := struct {
		i0 unsafe.Pointer
		i1 uint
		i2 cloudabi.Mprot
		i3 cloudabi.Mflags
		i4 cloudabi.Fd
		i5 cloudabi.Filesize
		o0 *unsafe.Pointer
	}{
		i0: i0,
		i1: i1,
		i2: i2,
		i3: i3,
		i4: i4,
		i5: i5,
		o0: &o0,
	}
	r = cloudabi.Errno(asmcgocall(nil, unsafe.Pointer(&args)))
	return
}

func cloudabi_sys_mem_protect(
	i0 unsafe.Pointer,
	i1 uint,
	i2 cloudabi.Mprot,
) (
	r cloudabi.Errno,
) {
	args := struct {
		i0 unsafe.Pointer
		i1 uint
		i2 cloudabi.Mprot
	}{
		i0: i0,
		i1: i1,
		i2: i2,
	}
	r = cloudabi.Errno(asmcgocall(nil, unsafe.Pointer(&args)))
	return
}

func cloudabi_sys_mem_sync(
	i0 unsafe.Pointer,
	i1 uint,
	i2 cloudabi.Msflags,
) (
	r cloudabi.Errno,
) {
	args := struct {
		i0 unsafe.Pointer
		i1 uint
		i2 cloudabi.Msflags
	}{
		i0: i0,
		i1: i1,
		i2: i2,
	}
	r = cloudabi.Errno(asmcgocall(nil, unsafe.Pointer(&args)))
	return
}

func cloudabi_sys_mem_unmap(
	i0 unsafe.Pointer,
	i1 uint,
) (
	r cloudabi.Errno,
) {
	args := struct {
		i0 unsafe.Pointer
		i1 uint
	}{
		i0: i0,
		i1: i1,
	}
	r = cloudabi.Errno(asmcgocall(nil, unsafe.Pointer(&args)))
	return
}

func cloudabi_sys_poll(
	i0 *cloudabi.Subscription,
	i1 *cloudabi.Event,
	i2 uint,
) (
	o0 uint,
	r cloudabi.Errno,
) {
	args := struct {
		i0 *cloudabi.Subscription
		i1 *cloudabi.Event
		i2 uint
		o0 *uint
	}{
		i0: i0,
		i1: i1,
		i2: i2,
		o0: &o0,
	}
	r = cloudabi.Errno(asmcgocall(nil, unsafe.Pointer(&args)))
	return
}

func cloudabi_sys_proc_exec(
	i0 cloudabi.Fd,
	i1 unsafe.Pointer,
	i2 uint,
	i3 *cloudabi.Fd,
	i4 uint,
) (
	r cloudabi.Errno,
) {
	args := struct {
		i0 cloudabi.Fd
		i1 unsafe.Pointer
		i2 uint
		i3 *cloudabi.Fd
		i4 uint
	}{
		i0: i0,
		i1: i1,
		i2: i2,
		i3: i3,
		i4: i4,
	}
	r = cloudabi.Errno(asmcgocall(nil, unsafe.Pointer(&args)))
	return
}

func cloudabi_sys_proc_exit(
	i0 cloudabi.Exitcode,
) {
	args := struct {
		i0 cloudabi.Exitcode
	}{
		i0: i0,
	}
	asmcgocall(nil, unsafe.Pointer(&args))
	throw("system call should not have returned")
}

func cloudabi_sys_proc_fork() (
	o0 cloudabi.Fd,
	o1 cloudabi.Tid,
	r cloudabi.Errno,
) {
	args := struct {
		o0 *cloudabi.Fd
		o1 *cloudabi.Tid
	}{
		o0: &o0,
		o1: &o1,
	}
	r = cloudabi.Errno(asmcgocall(nil, unsafe.Pointer(&args)))
	return
}

func cloudabi_sys_proc_raise(
	i0 cloudabi.Signal,
) (
	r cloudabi.Errno,
) {
	args := struct {
		i0 cloudabi.Signal
	}{
		i0: i0,
	}
	r = cloudabi.Errno(asmcgocall(nil, unsafe.Pointer(&args)))
	return
}

func cloudabi_sys_random_get(
	i0 unsafe.Pointer,
	i1 uint,
) (
	r cloudabi.Errno,
) {
	args := struct {
		i0 unsafe.Pointer
		i1 uint
	}{
		i0: i0,
		i1: i1,
	}
	r = cloudabi.Errno(asmcgocall(nil, unsafe.Pointer(&args)))
	return
}

func cloudabi_sys_sock_recv(
	i0 cloudabi.Fd,
	i1 *cloudabi.RecvIn,
	i2 *cloudabi.RecvOut,
) (
	r cloudabi.Errno,
) {
	args := struct {
		i0 cloudabi.Fd
		i1 *cloudabi.RecvIn
		i2 *cloudabi.RecvOut
	}{
		i0: i0,
		i1: i1,
		i2: i2,
	}
	r = cloudabi.Errno(asmcgocall(nil, unsafe.Pointer(&args)))
	return
}

func cloudabi_sys_sock_send(
	i0 cloudabi.Fd,
	i1 *cloudabi.SendIn,
	i2 *cloudabi.SendOut,
) (
	r cloudabi.Errno,
) {
	args := struct {
		i0 cloudabi.Fd
		i1 *cloudabi.SendIn
		i2 *cloudabi.SendOut
	}{
		i0: i0,
		i1: i1,
		i2: i2,
	}
	r = cloudabi.Errno(asmcgocall(nil, unsafe.Pointer(&args)))
	return
}

func cloudabi_sys_sock_shutdown(
	i0 cloudabi.Fd,
	i1 cloudabi.Sdflags,
) (
	r cloudabi.Errno,
) {
	args := struct {
		i0 cloudabi.Fd
		i1 cloudabi.Sdflags
	}{
		i0: i0,
		i1: i1,
	}
	r = cloudabi.Errno(asmcgocall(nil, unsafe.Pointer(&args)))
	return
}

func cloudabi_sys_thread_create(
	i0 *cloudabi.Threadattr,
) (
	o0 cloudabi.Tid,
	r cloudabi.Errno,
) {
	args := struct {
		i0 *cloudabi.Threadattr
		o0 *cloudabi.Tid
	}{
		i0: i0,
		o0: &o0,
	}
	r = cloudabi.Errno(asmcgocall(nil, unsafe.Pointer(&args)))
	return
}

func cloudabi_sys_thread_exit(
	i0 *cloudabi.Lock,
	i1 cloudabi.Scope,
) {
	args := struct {
		i0 *cloudabi.Lock
		i1 cloudabi.Scope
	}{
		i0: i0,
		i1: i1,
	}
	asmcgocall(nil, unsafe.Pointer(&args))
	throw("system call should not have returned")
}

func cloudabi_sys_thread_yield() (
	r cloudabi.Errno,
) {
	args := struct {
	}{}
	r = cloudabi.Errno(asmcgocall(nil, unsafe.Pointer(&args)))
	return
}
