// Copyright (c) 2016-2017 Nuxi (https://nuxi.nl/) and contributors.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions
// are met:
// 1. Redistributions of source code must retain the above copyright
//    notice, this list of conditions and the following disclaimer.
// 2. Redistributions in binary form must reproduce the above copyright
//    notice, this list of conditions and the following disclaimer in the
//    documentation and/or other materials provided with the distribution.
//
// THIS SOFTWARE IS PROVIDED BY THE AUTHOR AND CONTRIBUTORS ``AS IS'' AND
// ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
// IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
// ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE
// FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
// DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
// OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
// HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
// LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
// OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
// SUCH DAMAGE.
//
// This file is automatically generated. Do not edit.
//
// Source: https://github.com/NuxiNL/cloudabi

package cloudabi

import "unsafe"

type Advice uint8

const (
	Advice_Dontneed   = Advice(0x01)
	Advice_Noreuse    = Advice(0x02)
	Advice_Normal     = Advice(0x03)
	Advice_Random     = Advice(0x04)
	Advice_Sequential = Advice(0x05)
	Advice_Willneed   = Advice(0x06)
)

type Auxtype uint32

const (
	Auxtype_Argdata     = Auxtype(0x00000100)
	Auxtype_Argdatalen  = Auxtype(0x00000101)
	Auxtype_Base        = Auxtype(0x00000007)
	Auxtype_Canary      = Auxtype(0x00000102)
	Auxtype_Canarylen   = Auxtype(0x00000103)
	Auxtype_Ncpus       = Auxtype(0x00000104)
	Auxtype_Null        = Auxtype(0x00000000)
	Auxtype_Pagesz      = Auxtype(0x00000006)
	Auxtype_Phdr        = Auxtype(0x00000003)
	Auxtype_Phnum       = Auxtype(0x00000004)
	Auxtype_Pid         = Auxtype(0x00000107)
	Auxtype_SysinfoEhdr = Auxtype(0x00000106)
	Auxtype_Tid         = Auxtype(0x00000105)
)

type Clockid uint32

const (
	Clockid_Monotonic        = Clockid(0x00000001)
	Clockid_ProcessCputimeId = Clockid(0x00000002)
	Clockid_Realtime         = Clockid(0x00000003)
	Clockid_ThreadCputimeId  = Clockid(0x00000004)
)

type Condvar uint32
type Device uint64
type Dircookie uint64
type Errno uint16

const (
	Errno_Success        = Errno(0x0000)
	Errno_2big           = Errno(0x0001)
	Errno_Acces          = Errno(0x0002)
	Errno_Addrinuse      = Errno(0x0003)
	Errno_Addrnotavail   = Errno(0x0004)
	Errno_Afnosupport    = Errno(0x0005)
	Errno_Again          = Errno(0x0006)
	Errno_Already        = Errno(0x0007)
	Errno_Badf           = Errno(0x0008)
	Errno_Badmsg         = Errno(0x0009)
	Errno_Busy           = Errno(0x000a)
	Errno_Canceled       = Errno(0x000b)
	Errno_Child          = Errno(0x000c)
	Errno_Connaborted    = Errno(0x000d)
	Errno_Connrefused    = Errno(0x000e)
	Errno_Connreset      = Errno(0x000f)
	Errno_Deadlk         = Errno(0x0010)
	Errno_Destaddrreq    = Errno(0x0011)
	Errno_Dom            = Errno(0x0012)
	Errno_Dquot          = Errno(0x0013)
	Errno_Exist          = Errno(0x0014)
	Errno_Fault          = Errno(0x0015)
	Errno_Fbig           = Errno(0x0016)
	Errno_Hostunreach    = Errno(0x0017)
	Errno_Idrm           = Errno(0x0018)
	Errno_Ilseq          = Errno(0x0019)
	Errno_Inprogress     = Errno(0x001a)
	Errno_Intr           = Errno(0x001b)
	Errno_Inval          = Errno(0x001c)
	Errno_Io             = Errno(0x001d)
	Errno_Isconn         = Errno(0x001e)
	Errno_Isdir          = Errno(0x001f)
	Errno_Loop           = Errno(0x0020)
	Errno_Mfile          = Errno(0x0021)
	Errno_Mlink          = Errno(0x0022)
	Errno_Msgsize        = Errno(0x0023)
	Errno_Multihop       = Errno(0x0024)
	Errno_Nametoolong    = Errno(0x0025)
	Errno_Netdown        = Errno(0x0026)
	Errno_Netreset       = Errno(0x0027)
	Errno_Netunreach     = Errno(0x0028)
	Errno_Nfile          = Errno(0x0029)
	Errno_Nobufs         = Errno(0x002a)
	Errno_Nodev          = Errno(0x002b)
	Errno_Noent          = Errno(0x002c)
	Errno_Noexec         = Errno(0x002d)
	Errno_Nolck          = Errno(0x002e)
	Errno_Nolink         = Errno(0x002f)
	Errno_Nomem          = Errno(0x0030)
	Errno_Nomsg          = Errno(0x0031)
	Errno_Noprotoopt     = Errno(0x0032)
	Errno_Nospc          = Errno(0x0033)
	Errno_Nosys          = Errno(0x0034)
	Errno_Notconn        = Errno(0x0035)
	Errno_Notdir         = Errno(0x0036)
	Errno_Notempty       = Errno(0x0037)
	Errno_Notrecoverable = Errno(0x0038)
	Errno_Notsock        = Errno(0x0039)
	Errno_Notsup         = Errno(0x003a)
	Errno_Notty          = Errno(0x003b)
	Errno_Nxio           = Errno(0x003c)
	Errno_Overflow       = Errno(0x003d)
	Errno_Ownerdead      = Errno(0x003e)
	Errno_Perm           = Errno(0x003f)
	Errno_Pipe           = Errno(0x0040)
	Errno_Proto          = Errno(0x0041)
	Errno_Protonosupport = Errno(0x0042)
	Errno_Prototype      = Errno(0x0043)
	Errno_Range          = Errno(0x0044)
	Errno_Rofs           = Errno(0x0045)
	Errno_Spipe          = Errno(0x0046)
	Errno_Srch           = Errno(0x0047)
	Errno_Stale          = Errno(0x0048)
	Errno_Timedout       = Errno(0x0049)
	Errno_Txtbsy         = Errno(0x004a)
	Errno_Xdev           = Errno(0x004b)
	Errno_Notcapable     = Errno(0x004c)
)

type Eventrwflags uint16

const (
	Eventrwflags_Hangup = Eventrwflags(0x0001)
)

type Eventtype uint8

const (
	Eventtype_Clock         = Eventtype(0x01)
	Eventtype_Condvar       = Eventtype(0x02)
	Eventtype_FdRead        = Eventtype(0x03)
	Eventtype_FdWrite       = Eventtype(0x04)
	Eventtype_LockRdlock    = Eventtype(0x05)
	Eventtype_LockWrlock    = Eventtype(0x06)
	Eventtype_ProcTerminate = Eventtype(0x07)
)

type Exitcode uint32
type Fd uint32
type Fdflags uint16

const (
	Fdflags_Append   = Fdflags(0x0001)
	Fdflags_Dsync    = Fdflags(0x0002)
	Fdflags_Nonblock = Fdflags(0x0004)
	Fdflags_Rsync    = Fdflags(0x0008)
	Fdflags_Sync     = Fdflags(0x0010)
)

type Fdsflags uint16

const (
	Fdsflags_Flags  = Fdsflags(0x0001)
	Fdsflags_Rights = Fdsflags(0x0002)
)

type Filedelta int64
type Filesize uint64
type Filetype uint8

const (
	Filetype_Unknown         = Filetype(0x00)
	Filetype_BlockDevice     = Filetype(0x10)
	Filetype_CharacterDevice = Filetype(0x11)
	Filetype_Directory       = Filetype(0x20)
	Filetype_Process         = Filetype(0x50)
	Filetype_RegularFile     = Filetype(0x60)
	Filetype_SharedMemory    = Filetype(0x70)
	Filetype_SocketDgram     = Filetype(0x80)
	Filetype_SocketStream    = Filetype(0x82)
	Filetype_SymbolicLink    = Filetype(0x90)
)

type Fsflags uint16

const (
	Fsflags_Atim    = Fsflags(0x0001)
	Fsflags_AtimNow = Fsflags(0x0002)
	Fsflags_Mtim    = Fsflags(0x0004)
	Fsflags_MtimNow = Fsflags(0x0008)
	Fsflags_Size    = Fsflags(0x0010)
)

type Inode uint64
type Linkcount uint32
type Lock uint32
type Lookupflags uint32

const (
	Lookupflags_SymlinkFollow = Lookupflags(0x00000001)
)

type Mflags uint8

const (
	Mflags_Anon    = Mflags(0x01)
	Mflags_Fixed   = Mflags(0x02)
	Mflags_Private = Mflags(0x04)
	Mflags_Shared  = Mflags(0x08)
)

type Mprot uint8

const (
	Mprot_Exec  = Mprot(0x01)
	Mprot_Write = Mprot(0x02)
	Mprot_Read  = Mprot(0x04)
)

type Msflags uint8

const (
	Msflags_Async      = Msflags(0x01)
	Msflags_Invalidate = Msflags(0x02)
	Msflags_Sync       = Msflags(0x04)
)

type Nthreads uint32
type Oflags uint16

const (
	Oflags_Creat     = Oflags(0x0001)
	Oflags_Directory = Oflags(0x0002)
	Oflags_Excl      = Oflags(0x0004)
	Oflags_Trunc     = Oflags(0x0008)
)

type Riflags uint16

const (
	Riflags_Peek    = Riflags(0x0004)
	Riflags_Waitall = Riflags(0x0010)
)

type Rights uint64

const (
	Rights_FdDatasync          = Rights(0x0000000000000001)
	Rights_FdRead              = Rights(0x0000000000000002)
	Rights_FdSeek              = Rights(0x0000000000000004)
	Rights_FdStatPutFlags      = Rights(0x0000000000000008)
	Rights_FdSync              = Rights(0x0000000000000010)
	Rights_FdTell              = Rights(0x0000000000000020)
	Rights_FdWrite             = Rights(0x0000000000000040)
	Rights_FileAdvise          = Rights(0x0000000000000080)
	Rights_FileAllocate        = Rights(0x0000000000000100)
	Rights_FileCreateDirectory = Rights(0x0000000000000200)
	Rights_FileCreateFile      = Rights(0x0000000000000400)
	Rights_FileLinkSource      = Rights(0x0000000000001000)
	Rights_FileLinkTarget      = Rights(0x0000000000002000)
	Rights_FileOpen            = Rights(0x0000000000004000)
	Rights_FileReaddir         = Rights(0x0000000000008000)
	Rights_FileReadlink        = Rights(0x0000000000010000)
	Rights_FileRenameSource    = Rights(0x0000000000020000)
	Rights_FileRenameTarget    = Rights(0x0000000000040000)
	Rights_FileStatFget        = Rights(0x0000000000080000)
	Rights_FileStatFputSize    = Rights(0x0000000000100000)
	Rights_FileStatFputTimes   = Rights(0x0000000000200000)
	Rights_FileStatGet         = Rights(0x0000000000400000)
	Rights_FileStatPutTimes    = Rights(0x0000000000800000)
	Rights_FileSymlink         = Rights(0x0000000001000000)
	Rights_FileUnlink          = Rights(0x0000000002000000)
	Rights_MemMap              = Rights(0x0000000004000000)
	Rights_MemMapExec          = Rights(0x0000000008000000)
	Rights_PollFdReadwrite     = Rights(0x0000000010000000)
	Rights_PollProcTerminate   = Rights(0x0000000040000000)
	Rights_ProcExec            = Rights(0x0000000100000000)
	Rights_SockShutdown        = Rights(0x0000008000000000)
)

type Roflags uint16

const (
	Roflags_FdsTruncated  = Roflags(0x0001)
	Roflags_DataTruncated = Roflags(0x0008)
)

type Scope uint8

const (
	Scope_Private = Scope(0x04)
	Scope_Shared  = Scope(0x08)
)

type Sdflags uint8

const (
	Sdflags_Rd = Sdflags(0x01)
	Sdflags_Wr = Sdflags(0x02)
)

type Siflags uint16

const ()

type Signal uint8

const (
	Signal_Abrt   = Signal(0x01)
	Signal_Alrm   = Signal(0x02)
	Signal_Bus    = Signal(0x03)
	Signal_Chld   = Signal(0x04)
	Signal_Cont   = Signal(0x05)
	Signal_Fpe    = Signal(0x06)
	Signal_Hup    = Signal(0x07)
	Signal_Ill    = Signal(0x08)
	Signal_Int    = Signal(0x09)
	Signal_Kill   = Signal(0x0a)
	Signal_Pipe   = Signal(0x0b)
	Signal_Quit   = Signal(0x0c)
	Signal_Segv   = Signal(0x0d)
	Signal_Stop   = Signal(0x0e)
	Signal_Sys    = Signal(0x0f)
	Signal_Term   = Signal(0x10)
	Signal_Trap   = Signal(0x11)
	Signal_Tstp   = Signal(0x12)
	Signal_Ttin   = Signal(0x13)
	Signal_Ttou   = Signal(0x14)
	Signal_Urg    = Signal(0x15)
	Signal_Usr1   = Signal(0x16)
	Signal_Usr2   = Signal(0x17)
	Signal_Vtalrm = Signal(0x18)
	Signal_Xcpu   = Signal(0x19)
	Signal_Xfsz   = Signal(0x1a)
)

type Subclockflags uint16

const (
	Subclockflags_Abstime = Subclockflags(0x0001)
)

type Subrwflags uint16

const (
	Subrwflags_Poll = Subrwflags(0x0001)
)

type Tid uint32
type Timestamp uint64
type Ulflags uint8

const (
	Ulflags_Removedir = Ulflags(0x01)
)

type Userdata uint64
type Whence uint8

const (
	Whence_Cur = Whence(0x01)
	Whence_End = Whence(0x02)
	Whence_Set = Whence(0x03)
)

type Auxv struct {
	AType     Auxtype
	AuxvUnion [1]uint64
}
type Ciovec struct {
	Buf    unsafe.Pointer
	BufLen uint
}
type Dirent struct {
	DNext   Dircookie
	DIno    Inode
	DNamlen uint32
	DType   Filetype
}
type Event struct {
	Userdata   Userdata
	Error      Errno
	Type       Eventtype
	EventUnion [2]uint64
}
type Event_FdReadwrite struct {
	Nbytes Filesize
	Unused [4]byte
	Flags  Eventrwflags
}
type Event_ProcTerminate struct {
	Unused   [4]byte
	Signal   Signal
	Exitcode Exitcode
}
type Fdstat struct {
	FsFiletype         Filetype
	FsFlags            Fdflags
	FsRightsBase       Rights
	FsRightsInheriting Rights
}
type Filestat struct {
	StDev      Device
	StIno      Inode
	StFiletype Filetype
	StNlink    Linkcount
	StSize     Filesize
	StAtim     Timestamp
	StMtim     Timestamp
	StCtim     Timestamp
}
type Iovec struct {
	Buf    unsafe.Pointer
	BufLen uint
}
type Lookup struct {
	Fd    Fd
	Flags Lookupflags
}
type Processentry func(
	auxv *Auxv,
)
type RecvIn struct {
	RiData    *Iovec
	RiDataLen uint
	RiFds     *Fd
	RiFdsLen  uint
	RiFlags   Riflags
}
type RecvOut struct {
	RoDatalen uint
	RoFdslen  uint
	RoUnused  [40]byte
	RoFlags   Roflags
}
type SendIn struct {
	SiData    *Ciovec
	SiDataLen uint
	SiFds     *Fd
	SiFdsLen  uint
	SiFlags   Siflags
}
type SendOut struct {
	SoDatalen uint
}
type Subscription struct {
	Userdata          Userdata
	Unused            uint16
	Type              Eventtype
	SubscriptionUnion [5]uint64
}
type Subscription_Clock struct {
	Identifier Userdata
	ClockId    Clockid
	Timeout    Timestamp
	Precision  Timestamp
	Flags      Subclockflags
}
type Subscription_Condvar struct {
	Condvar      *Condvar
	Lock         *Lock
	CondvarScope Scope
	LockScope    Scope
}
type Subscription_FdReadwrite struct {
	Fd    Fd
	Flags Subrwflags
}
type Subscription_Lock struct {
	Lock      *Lock
	LockScope Scope
}
type Subscription_ProcTerminate struct {
	Fd Fd
}
type Tcb struct {
	Parent unsafe.Pointer
}
type Threadentry func(
	tid Tid,
	aux unsafe.Pointer,
)
type Threadattr struct {
	EntryPoint Threadentry
	Stack      unsafe.Pointer
	StackLen   uint
	Argument   unsafe.Pointer
}
